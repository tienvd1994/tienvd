//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ATI.Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<BussinessArea> BussinessAreas { get; set; }
        public virtual DbSet<CateNew> CateNews { get; set; }
        public virtual DbSet<CateProduct> CateProducts { get; set; }
        public virtual DbSet<CommonInfo> CommonInfoes { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ContentStatic> ContentStatics { get; set; }
        public virtual DbSet<Contractor> Contractors { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerSay> CustomerSays { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<FAQ> FAQs { get; set; }
        public virtual DbSet<Introduce> Introduces { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Tracker> Trackers { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
    
        public virtual ObjectResult<sp_Contact_GetLastest_Result> sp_Contact_GetLastest(string type, Nullable<int> pageIndex, Nullable<int> recordPerPage, ObjectParameter totalRecord)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var recordPerPageParameter = recordPerPage.HasValue ?
                new ObjectParameter("RecordPerPage", recordPerPage) :
                new ObjectParameter("RecordPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Contact_GetLastest_Result>("sp_Contact_GetLastest", typeParameter, pageIndexParameter, recordPerPageParameter, totalRecord);
        }
    
        public virtual ObjectResult<sp_CustomerSay_GetByOrderNo_Result> sp_CustomerSay_GetByOrderNo(Nullable<int> langId, Nullable<int> pageIndex, Nullable<int> recordPerPage, ObjectParameter totalRecord)
        {
            var langIdParameter = langId.HasValue ?
                new ObjectParameter("LangId", langId) :
                new ObjectParameter("LangId", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var recordPerPageParameter = recordPerPage.HasValue ?
                new ObjectParameter("RecordPerPage", recordPerPage) :
                new ObjectParameter("RecordPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomerSay_GetByOrderNo_Result>("sp_CustomerSay_GetByOrderNo", langIdParameter, pageIndexParameter, recordPerPageParameter, totalRecord);
        }
    
        public virtual ObjectResult<sp_News_SearchByTitle_Result> sp_News_SearchByTitle(Nullable<int> langId, Nullable<int> cateId, Nullable<int> type, string unsignTitle, Nullable<int> pageIndex, Nullable<int> recordPerPage, ObjectParameter totalRecord)
        {
            var langIdParameter = langId.HasValue ?
                new ObjectParameter("LangId", langId) :
                new ObjectParameter("LangId", typeof(int));
    
            var cateIdParameter = cateId.HasValue ?
                new ObjectParameter("CateId", cateId) :
                new ObjectParameter("CateId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var unsignTitleParameter = unsignTitle != null ?
                new ObjectParameter("UnsignTitle", unsignTitle) :
                new ObjectParameter("UnsignTitle", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var recordPerPageParameter = recordPerPage.HasValue ?
                new ObjectParameter("RecordPerPage", recordPerPage) :
                new ObjectParameter("RecordPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_News_SearchByTitle_Result>("sp_News_SearchByTitle", langIdParameter, cateIdParameter, typeParameter, unsignTitleParameter, pageIndexParameter, recordPerPageParameter, totalRecord);
        }
    
        public virtual ObjectResult<sp_Tracker_GetLastest_Result> sp_Tracker_GetLastest(string iP, Nullable<int> pageIndex, Nullable<int> recordPerPage, ObjectParameter totalRecord)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var recordPerPageParameter = recordPerPage.HasValue ?
                new ObjectParameter("RecordPerPage", recordPerPage) :
                new ObjectParameter("RecordPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Tracker_GetLastest_Result>("sp_Tracker_GetLastest", iPParameter, pageIndexParameter, recordPerPageParameter, totalRecord);
        }
    
        public virtual ObjectResult<sp_User_GetLastest_Result> sp_User_GetLastest(Nullable<int> pageIndex, Nullable<int> recordPerPage, ObjectParameter totalRecord)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var recordPerPageParameter = recordPerPage.HasValue ?
                new ObjectParameter("RecordPerPage", recordPerPage) :
                new ObjectParameter("RecordPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_User_GetLastest_Result>("sp_User_GetLastest", pageIndexParameter, recordPerPageParameter, totalRecord);
        }
    }
}
